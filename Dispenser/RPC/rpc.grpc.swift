//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Sweetrpc_SweetGetInfoCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetGetInfoCallBase: ClientCallUnaryBase<Sweetrpc_GetInfoRequest, Sweetrpc_GetInfoResponse>, Sweetrpc_SweetGetInfoCall {
  override class var method: String { return "/sweetrpc.Sweet/GetInfo" }
}

internal protocol Sweetrpc_SweetSetNameCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetSetNameCallBase: ClientCallUnaryBase<Sweetrpc_SetNameRequest, Sweetrpc_SetNameResponse>, Sweetrpc_SweetSetNameCall {
  override class var method: String { return "/sweetrpc.Sweet/SetName" }
}

internal protocol Sweetrpc_SweetSetDispenseOnTouchCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetSetDispenseOnTouchCallBase: ClientCallUnaryBase<Sweetrpc_SetDispenseOnTouchRequest, Sweetrpc_SetDispenseOnTouchResponse>, Sweetrpc_SweetSetDispenseOnTouchCall {
  override class var method: String { return "/sweetrpc.Sweet/SetDispenseOnTouch" }
}

internal protocol Sweetrpc_SweetSetBuzzOnDispenseCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetSetBuzzOnDispenseCallBase: ClientCallUnaryBase<Sweetrpc_SetBuzzOnDispenseRequest, Sweetrpc_SetBuzzOnDispenseResponse>, Sweetrpc_SweetSetBuzzOnDispenseCall {
  override class var method: String { return "/sweetrpc.Sweet/SetBuzzOnDispense" }
}

internal protocol Sweetrpc_SweetGetWpaConnectionInfoCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetGetWpaConnectionInfoCallBase: ClientCallUnaryBase<Sweetrpc_GetWpaConnectionInfoRequest, Sweetrpc_GetWpaConnectionInfoResponse>, Sweetrpc_SweetGetWpaConnectionInfoCall {
  override class var method: String { return "/sweetrpc.Sweet/GetWpaConnectionInfo" }
}

internal protocol Sweetrpc_SweetConnectWpaNetworkCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetConnectWpaNetworkCallBase: ClientCallUnaryBase<Sweetrpc_ConnectWpaNetworkRequest, Sweetrpc_ConnectWpaNetworkResponse>, Sweetrpc_SweetConnectWpaNetworkCall {
  override class var method: String { return "/sweetrpc.Sweet/ConnectWpaNetwork" }
}

internal protocol Sweetrpc_SweetGetWpaNetworksCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetGetWpaNetworksCallBase: ClientCallUnaryBase<Sweetrpc_GetWpaNetworksRequest, Sweetrpc_GetWpaNetworksResponse>, Sweetrpc_SweetGetWpaNetworksCall {
  override class var method: String { return "/sweetrpc.Sweet/GetWpaNetworks" }
}

internal protocol Sweetrpc_SweetUpdateCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetUpdateCallBase: ClientCallUnaryBase<Sweetrpc_UpdateRequest, Sweetrpc_UpdateResponse>, Sweetrpc_SweetUpdateCall {
  override class var method: String { return "/sweetrpc.Sweet/Update" }
}

internal protocol Sweetrpc_SweetConnectToRemoteNodeCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetConnectToRemoteNodeCallBase: ClientCallUnaryBase<Sweetrpc_ConnectToRemoteNodeRequest, Sweetrpc_ConnectToRemoteNodeResponse>, Sweetrpc_SweetConnectToRemoteNodeCall {
  override class var method: String { return "/sweetrpc.Sweet/ConnectToRemoteNode" }
}

internal protocol Sweetrpc_SweetDisconnectFromRemoteNodeCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetDisconnectFromRemoteNodeCallBase: ClientCallUnaryBase<Sweetrpc_DisconnectFromRemoteNodeRequest, Sweetrpc_DisconnectFromRemoteNodeResponse>, Sweetrpc_SweetDisconnectFromRemoteNodeCall {
  override class var method: String { return "/sweetrpc.Sweet/DisconnectFromRemoteNode" }
}

internal protocol Sweetrpc_SweetRebootCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetRebootCallBase: ClientCallUnaryBase<Sweetrpc_RebootRequest, Sweetrpc_RebootResponse>, Sweetrpc_SweetRebootCall {
  override class var method: String { return "/sweetrpc.Sweet/Reboot" }
}

internal protocol Sweetrpc_SweetToggleDispenserCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetToggleDispenserCallBase: ClientCallUnaryBase<Sweetrpc_ToggleDispenserRequest, Sweetrpc_ToggleDispenserResponse>, Sweetrpc_SweetToggleDispenserCall {
  override class var method: String { return "/sweetrpc.Sweet/ToggleDispenser" }
}

internal protocol Sweetrpc_SweetSubscribeDispensesCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Sweetrpc_Dispense?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Sweetrpc_Dispense?>) -> Void) throws
}

internal extension Sweetrpc_SweetSubscribeDispensesCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Sweetrpc_Dispense? { return try self._receive(timeout: timeout) }
}

fileprivate final class Sweetrpc_SweetSubscribeDispensesCallBase: ClientCallServerStreamingBase<Sweetrpc_SubscribeDispensesRequest, Sweetrpc_Dispense>, Sweetrpc_SweetSubscribeDispensesCall {
  override class var method: String { return "/sweetrpc.Sweet/SubscribeDispenses" }
}


/// Instantiate Sweetrpc_SweetServiceClient, then call methods of this protocol to make API calls.
internal protocol Sweetrpc_SweetService: ServiceClient {
  /// Synchronous. Unary.
  func getInfo(_ request: Sweetrpc_GetInfoRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_GetInfoResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getInfo(_ request: Sweetrpc_GetInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_GetInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetInfoCall

  /// Synchronous. Unary.
  func setName(_ request: Sweetrpc_SetNameRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_SetNameResponse
  /// Asynchronous. Unary.
  @discardableResult
  func setName(_ request: Sweetrpc_SetNameRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_SetNameResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetNameCall

  /// Synchronous. Unary.
  func setDispenseOnTouch(_ request: Sweetrpc_SetDispenseOnTouchRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_SetDispenseOnTouchResponse
  /// Asynchronous. Unary.
  @discardableResult
  func setDispenseOnTouch(_ request: Sweetrpc_SetDispenseOnTouchRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_SetDispenseOnTouchResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetDispenseOnTouchCall

  /// Synchronous. Unary.
  func setBuzzOnDispense(_ request: Sweetrpc_SetBuzzOnDispenseRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_SetBuzzOnDispenseResponse
  /// Asynchronous. Unary.
  @discardableResult
  func setBuzzOnDispense(_ request: Sweetrpc_SetBuzzOnDispenseRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_SetBuzzOnDispenseResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetBuzzOnDispenseCall

  /// Synchronous. Unary.
  func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_GetWpaConnectionInfoResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_GetWpaConnectionInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaConnectionInfoCall

  /// Synchronous. Unary.
  func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_ConnectWpaNetworkResponse
  /// Asynchronous. Unary.
  @discardableResult
  func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_ConnectWpaNetworkResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectWpaNetworkCall

  /// Synchronous. Unary.
  func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_GetWpaNetworksResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_GetWpaNetworksResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaNetworksCall

  /// Synchronous. Unary.
  func update(_ request: Sweetrpc_UpdateRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_UpdateResponse
  /// Asynchronous. Unary.
  @discardableResult
  func update(_ request: Sweetrpc_UpdateRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_UpdateResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetUpdateCall

  /// Synchronous. Unary.
  func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_ConnectToRemoteNodeResponse
  /// Asynchronous. Unary.
  @discardableResult
  func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_ConnectToRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectToRemoteNodeCall

  /// Synchronous. Unary.
  func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_DisconnectFromRemoteNodeResponse
  /// Asynchronous. Unary.
  @discardableResult
  func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_DisconnectFromRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetDisconnectFromRemoteNodeCall

  /// Synchronous. Unary.
  func reboot(_ request: Sweetrpc_RebootRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_RebootResponse
  /// Asynchronous. Unary.
  @discardableResult
  func reboot(_ request: Sweetrpc_RebootRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_RebootResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetRebootCall

  /// Synchronous. Unary.
  func toggleDispenser(_ request: Sweetrpc_ToggleDispenserRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_ToggleDispenserResponse
  /// Asynchronous. Unary.
  @discardableResult
  func toggleDispenser(_ request: Sweetrpc_ToggleDispenserRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_ToggleDispenserResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetToggleDispenserCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeDispenses(_ request: Sweetrpc_SubscribeDispensesRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Sweetrpc_SweetSubscribeDispensesCall

}

internal extension Sweetrpc_SweetService {
  /// Synchronous. Unary.
  func getInfo(_ request: Sweetrpc_GetInfoRequest) throws -> Sweetrpc_GetInfoResponse {
    return try self.getInfo(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getInfo(_ request: Sweetrpc_GetInfoRequest, completion: @escaping (Sweetrpc_GetInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetInfoCall {
    return try self.getInfo(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func setName(_ request: Sweetrpc_SetNameRequest) throws -> Sweetrpc_SetNameResponse {
    return try self.setName(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func setName(_ request: Sweetrpc_SetNameRequest, completion: @escaping (Sweetrpc_SetNameResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetNameCall {
    return try self.setName(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func setDispenseOnTouch(_ request: Sweetrpc_SetDispenseOnTouchRequest) throws -> Sweetrpc_SetDispenseOnTouchResponse {
    return try self.setDispenseOnTouch(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func setDispenseOnTouch(_ request: Sweetrpc_SetDispenseOnTouchRequest, completion: @escaping (Sweetrpc_SetDispenseOnTouchResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetDispenseOnTouchCall {
    return try self.setDispenseOnTouch(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func setBuzzOnDispense(_ request: Sweetrpc_SetBuzzOnDispenseRequest) throws -> Sweetrpc_SetBuzzOnDispenseResponse {
    return try self.setBuzzOnDispense(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func setBuzzOnDispense(_ request: Sweetrpc_SetBuzzOnDispenseRequest, completion: @escaping (Sweetrpc_SetBuzzOnDispenseResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetBuzzOnDispenseCall {
    return try self.setBuzzOnDispense(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest) throws -> Sweetrpc_GetWpaConnectionInfoResponse {
    return try self.getWpaConnectionInfo(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest, completion: @escaping (Sweetrpc_GetWpaConnectionInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaConnectionInfoCall {
    return try self.getWpaConnectionInfo(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest) throws -> Sweetrpc_ConnectWpaNetworkResponse {
    return try self.connectWpaNetwork(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest, completion: @escaping (Sweetrpc_ConnectWpaNetworkResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectWpaNetworkCall {
    return try self.connectWpaNetwork(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest) throws -> Sweetrpc_GetWpaNetworksResponse {
    return try self.getWpaNetworks(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest, completion: @escaping (Sweetrpc_GetWpaNetworksResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaNetworksCall {
    return try self.getWpaNetworks(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func update(_ request: Sweetrpc_UpdateRequest) throws -> Sweetrpc_UpdateResponse {
    return try self.update(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func update(_ request: Sweetrpc_UpdateRequest, completion: @escaping (Sweetrpc_UpdateResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetUpdateCall {
    return try self.update(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest) throws -> Sweetrpc_ConnectToRemoteNodeResponse {
    return try self.connectToRemoteNode(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest, completion: @escaping (Sweetrpc_ConnectToRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectToRemoteNodeCall {
    return try self.connectToRemoteNode(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest) throws -> Sweetrpc_DisconnectFromRemoteNodeResponse {
    return try self.disconnectFromRemoteNode(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest, completion: @escaping (Sweetrpc_DisconnectFromRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetDisconnectFromRemoteNodeCall {
    return try self.disconnectFromRemoteNode(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func reboot(_ request: Sweetrpc_RebootRequest) throws -> Sweetrpc_RebootResponse {
    return try self.reboot(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func reboot(_ request: Sweetrpc_RebootRequest, completion: @escaping (Sweetrpc_RebootResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetRebootCall {
    return try self.reboot(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func toggleDispenser(_ request: Sweetrpc_ToggleDispenserRequest) throws -> Sweetrpc_ToggleDispenserResponse {
    return try self.toggleDispenser(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func toggleDispenser(_ request: Sweetrpc_ToggleDispenserRequest, completion: @escaping (Sweetrpc_ToggleDispenserResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetToggleDispenserCall {
    return try self.toggleDispenser(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeDispenses(_ request: Sweetrpc_SubscribeDispensesRequest, completion: ((CallResult) -> Void)?) throws -> Sweetrpc_SweetSubscribeDispensesCall {
    return try self.subscribeDispenses(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Sweetrpc_SweetServiceClient: ServiceClientBase, Sweetrpc_SweetService {
  /// Synchronous. Unary.
  internal func getInfo(_ request: Sweetrpc_GetInfoRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_GetInfoResponse {
    return try Sweetrpc_SweetGetInfoCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getInfo(_ request: Sweetrpc_GetInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_GetInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetInfoCall {
    return try Sweetrpc_SweetGetInfoCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setName(_ request: Sweetrpc_SetNameRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_SetNameResponse {
    return try Sweetrpc_SweetSetNameCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func setName(_ request: Sweetrpc_SetNameRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_SetNameResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetNameCall {
    return try Sweetrpc_SweetSetNameCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setDispenseOnTouch(_ request: Sweetrpc_SetDispenseOnTouchRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_SetDispenseOnTouchResponse {
    return try Sweetrpc_SweetSetDispenseOnTouchCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func setDispenseOnTouch(_ request: Sweetrpc_SetDispenseOnTouchRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_SetDispenseOnTouchResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetDispenseOnTouchCall {
    return try Sweetrpc_SweetSetDispenseOnTouchCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setBuzzOnDispense(_ request: Sweetrpc_SetBuzzOnDispenseRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_SetBuzzOnDispenseResponse {
    return try Sweetrpc_SweetSetBuzzOnDispenseCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func setBuzzOnDispense(_ request: Sweetrpc_SetBuzzOnDispenseRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_SetBuzzOnDispenseResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetSetBuzzOnDispenseCall {
    return try Sweetrpc_SweetSetBuzzOnDispenseCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_GetWpaConnectionInfoResponse {
    return try Sweetrpc_SweetGetWpaConnectionInfoCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_GetWpaConnectionInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaConnectionInfoCall {
    return try Sweetrpc_SweetGetWpaConnectionInfoCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_ConnectWpaNetworkResponse {
    return try Sweetrpc_SweetConnectWpaNetworkCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_ConnectWpaNetworkResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectWpaNetworkCall {
    return try Sweetrpc_SweetConnectWpaNetworkCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_GetWpaNetworksResponse {
    return try Sweetrpc_SweetGetWpaNetworksCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_GetWpaNetworksResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaNetworksCall {
    return try Sweetrpc_SweetGetWpaNetworksCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func update(_ request: Sweetrpc_UpdateRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_UpdateResponse {
    return try Sweetrpc_SweetUpdateCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func update(_ request: Sweetrpc_UpdateRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_UpdateResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetUpdateCall {
    return try Sweetrpc_SweetUpdateCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_ConnectToRemoteNodeResponse {
    return try Sweetrpc_SweetConnectToRemoteNodeCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_ConnectToRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectToRemoteNodeCall {
    return try Sweetrpc_SweetConnectToRemoteNodeCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_DisconnectFromRemoteNodeResponse {
    return try Sweetrpc_SweetDisconnectFromRemoteNodeCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_DisconnectFromRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetDisconnectFromRemoteNodeCall {
    return try Sweetrpc_SweetDisconnectFromRemoteNodeCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func reboot(_ request: Sweetrpc_RebootRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_RebootResponse {
    return try Sweetrpc_SweetRebootCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func reboot(_ request: Sweetrpc_RebootRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_RebootResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetRebootCall {
    return try Sweetrpc_SweetRebootCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func toggleDispenser(_ request: Sweetrpc_ToggleDispenserRequest, metadata customMetadata: Metadata) throws -> Sweetrpc_ToggleDispenserResponse {
    return try Sweetrpc_SweetToggleDispenserCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func toggleDispenser(_ request: Sweetrpc_ToggleDispenserRequest, metadata customMetadata: Metadata, completion: @escaping (Sweetrpc_ToggleDispenserResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetToggleDispenserCall {
    return try Sweetrpc_SweetToggleDispenserCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeDispenses(_ request: Sweetrpc_SubscribeDispensesRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Sweetrpc_SweetSubscribeDispensesCall {
    return try Sweetrpc_SweetSubscribeDispensesCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

