//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Sweetrpc_SweetGetFeatureCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetGetFeatureCallBase: ClientCallUnaryBase<Sweetrpc_Test, Sweetrpc_Test>, Sweetrpc_SweetGetFeatureCall {
  override class var method: String { return "/sweetrpc.Sweet/GetFeature" }
}

internal protocol Sweetrpc_SweetSubscribeWpaNetworksCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Sweetrpc_WpaNetwork?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Sweetrpc_WpaNetwork?>) -> Void) throws
}

internal extension Sweetrpc_SweetSubscribeWpaNetworksCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Sweetrpc_WpaNetwork? { return try self._receive(timeout: timeout) }
}

fileprivate final class Sweetrpc_SweetSubscribeWpaNetworksCallBase: ClientCallServerStreamingBase<Sweetrpc_SubscribeWpaNetworksRequest, Sweetrpc_WpaNetwork>, Sweetrpc_SweetSubscribeWpaNetworksCall {
  override class var method: String { return "/sweetrpc.Sweet/SubscribeWpaNetworks" }
}


/// Instantiate Sweetrpc_SweetServiceClient, then call methods of this protocol to make API calls.
internal protocol Sweetrpc_SweetService: ServiceClient {
  /// Synchronous. Unary.
  func getFeature(_ request: Sweetrpc_Test) throws -> Sweetrpc_Test
  /// Asynchronous. Unary.
  func getFeature(_ request: Sweetrpc_Test, completion: @escaping (Sweetrpc_Test?, CallResult) -> Void) throws -> Sweetrpc_SweetGetFeatureCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeWpaNetworks(_ request: Sweetrpc_SubscribeWpaNetworksRequest, completion: ((CallResult) -> Void)?) throws -> Sweetrpc_SweetSubscribeWpaNetworksCall

}

internal final class Sweetrpc_SweetServiceClient: ServiceClientBase, Sweetrpc_SweetService {
  /// Synchronous. Unary.
  internal func getFeature(_ request: Sweetrpc_Test) throws -> Sweetrpc_Test {
    return try Sweetrpc_SweetGetFeatureCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getFeature(_ request: Sweetrpc_Test, completion: @escaping (Sweetrpc_Test?, CallResult) -> Void) throws -> Sweetrpc_SweetGetFeatureCall {
    return try Sweetrpc_SweetGetFeatureCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeWpaNetworks(_ request: Sweetrpc_SubscribeWpaNetworksRequest, completion: ((CallResult) -> Void)?) throws -> Sweetrpc_SweetSubscribeWpaNetworksCall {
    return try Sweetrpc_SweetSubscribeWpaNetworksCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

