//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Sweetrpc_SweetGetInfoCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetGetInfoCallBase: ClientCallUnaryBase<Sweetrpc_GetInfoRequest, Sweetrpc_GetInfoResponse>, Sweetrpc_SweetGetInfoCall {
  override class var method: String { return "/sweetrpc.Sweet/GetInfo" }
}

internal protocol Sweetrpc_SweetGetWpaConnectionInfoCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetGetWpaConnectionInfoCallBase: ClientCallUnaryBase<Sweetrpc_GetWpaConnectionInfoRequest, Sweetrpc_GetWpaConnectionInfoResponse>, Sweetrpc_SweetGetWpaConnectionInfoCall {
  override class var method: String { return "/sweetrpc.Sweet/GetWpaConnectionInfo" }
}

internal protocol Sweetrpc_SweetConnectWpaNetworkCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetConnectWpaNetworkCallBase: ClientCallUnaryBase<Sweetrpc_ConnectWpaNetworkRequest, Sweetrpc_ConnectWpaNetworkResponse>, Sweetrpc_SweetConnectWpaNetworkCall {
  override class var method: String { return "/sweetrpc.Sweet/ConnectWpaNetwork" }
}

internal protocol Sweetrpc_SweetGetWpaNetworksCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetGetWpaNetworksCallBase: ClientCallUnaryBase<Sweetrpc_GetWpaNetworksRequest, Sweetrpc_GetWpaNetworksResponse>, Sweetrpc_SweetGetWpaNetworksCall {
  override class var method: String { return "/sweetrpc.Sweet/GetWpaNetworks" }
}

internal protocol Sweetrpc_SweetUpdateCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetUpdateCallBase: ClientCallUnaryBase<Sweetrpc_UpdateRequest, Sweetrpc_UpdateResponse>, Sweetrpc_SweetUpdateCall {
  override class var method: String { return "/sweetrpc.Sweet/Update" }
}

internal protocol Sweetrpc_SweetConnectToRemoteNodeCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetConnectToRemoteNodeCallBase: ClientCallUnaryBase<Sweetrpc_ConnectToRemoteNodeRequest, Sweetrpc_ConnectToRemoteNodeResponse>, Sweetrpc_SweetConnectToRemoteNodeCall {
  override class var method: String { return "/sweetrpc.Sweet/ConnectToRemoteNode" }
}

internal protocol Sweetrpc_SweetDisconnectFromRemoteNodeCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetDisconnectFromRemoteNodeCallBase: ClientCallUnaryBase<Sweetrpc_DisconnectFromRemoteNodeRequest, Sweetrpc_DisconnectFromRemoteNodeResponse>, Sweetrpc_SweetDisconnectFromRemoteNodeCall {
  override class var method: String { return "/sweetrpc.Sweet/DisconnectFromRemoteNode" }
}

internal protocol Sweetrpc_SweetRebootCall: ClientCallUnary {}

fileprivate final class Sweetrpc_SweetRebootCallBase: ClientCallUnaryBase<Sweetrpc_RebootRequest, Sweetrpc_RebootResponse>, Sweetrpc_SweetRebootCall {
  override class var method: String { return "/sweetrpc.Sweet/Reboot" }
}


/// Instantiate Sweetrpc_SweetServiceClient, then call methods of this protocol to make API calls.
internal protocol Sweetrpc_SweetService: ServiceClient {
  /// Synchronous. Unary.
  func getInfo(_ request: Sweetrpc_GetInfoRequest) throws -> Sweetrpc_GetInfoResponse
  /// Asynchronous. Unary.
  func getInfo(_ request: Sweetrpc_GetInfoRequest, completion: @escaping (Sweetrpc_GetInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetInfoCall

  /// Synchronous. Unary.
  func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest) throws -> Sweetrpc_GetWpaConnectionInfoResponse
  /// Asynchronous. Unary.
  func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest, completion: @escaping (Sweetrpc_GetWpaConnectionInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaConnectionInfoCall

  /// Synchronous. Unary.
  func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest) throws -> Sweetrpc_ConnectWpaNetworkResponse
  /// Asynchronous. Unary.
  func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest, completion: @escaping (Sweetrpc_ConnectWpaNetworkResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectWpaNetworkCall

  /// Synchronous. Unary.
  func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest) throws -> Sweetrpc_GetWpaNetworksResponse
  /// Asynchronous. Unary.
  func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest, completion: @escaping (Sweetrpc_GetWpaNetworksResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaNetworksCall

  /// Synchronous. Unary.
  func update(_ request: Sweetrpc_UpdateRequest) throws -> Sweetrpc_UpdateResponse
  /// Asynchronous. Unary.
  func update(_ request: Sweetrpc_UpdateRequest, completion: @escaping (Sweetrpc_UpdateResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetUpdateCall

  /// Synchronous. Unary.
  func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest) throws -> Sweetrpc_ConnectToRemoteNodeResponse
  /// Asynchronous. Unary.
  func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest, completion: @escaping (Sweetrpc_ConnectToRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectToRemoteNodeCall

  /// Synchronous. Unary.
  func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest) throws -> Sweetrpc_DisconnectFromRemoteNodeResponse
  /// Asynchronous. Unary.
  func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest, completion: @escaping (Sweetrpc_DisconnectFromRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetDisconnectFromRemoteNodeCall

  /// Synchronous. Unary.
  func reboot(_ request: Sweetrpc_RebootRequest) throws -> Sweetrpc_RebootResponse
  /// Asynchronous. Unary.
  func reboot(_ request: Sweetrpc_RebootRequest, completion: @escaping (Sweetrpc_RebootResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetRebootCall

}

internal final class Sweetrpc_SweetServiceClient: ServiceClientBase, Sweetrpc_SweetService {
  /// Synchronous. Unary.
  internal func getInfo(_ request: Sweetrpc_GetInfoRequest) throws -> Sweetrpc_GetInfoResponse {
    return try Sweetrpc_SweetGetInfoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getInfo(_ request: Sweetrpc_GetInfoRequest, completion: @escaping (Sweetrpc_GetInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetInfoCall {
    return try Sweetrpc_SweetGetInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest) throws -> Sweetrpc_GetWpaConnectionInfoResponse {
    return try Sweetrpc_SweetGetWpaConnectionInfoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getWpaConnectionInfo(_ request: Sweetrpc_GetWpaConnectionInfoRequest, completion: @escaping (Sweetrpc_GetWpaConnectionInfoResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaConnectionInfoCall {
    return try Sweetrpc_SweetGetWpaConnectionInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest) throws -> Sweetrpc_ConnectWpaNetworkResponse {
    return try Sweetrpc_SweetConnectWpaNetworkCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func connectWpaNetwork(_ request: Sweetrpc_ConnectWpaNetworkRequest, completion: @escaping (Sweetrpc_ConnectWpaNetworkResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectWpaNetworkCall {
    return try Sweetrpc_SweetConnectWpaNetworkCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest) throws -> Sweetrpc_GetWpaNetworksResponse {
    return try Sweetrpc_SweetGetWpaNetworksCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getWpaNetworks(_ request: Sweetrpc_GetWpaNetworksRequest, completion: @escaping (Sweetrpc_GetWpaNetworksResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetGetWpaNetworksCall {
    return try Sweetrpc_SweetGetWpaNetworksCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func update(_ request: Sweetrpc_UpdateRequest) throws -> Sweetrpc_UpdateResponse {
    return try Sweetrpc_SweetUpdateCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func update(_ request: Sweetrpc_UpdateRequest, completion: @escaping (Sweetrpc_UpdateResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetUpdateCall {
    return try Sweetrpc_SweetUpdateCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest) throws -> Sweetrpc_ConnectToRemoteNodeResponse {
    return try Sweetrpc_SweetConnectToRemoteNodeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func connectToRemoteNode(_ request: Sweetrpc_ConnectToRemoteNodeRequest, completion: @escaping (Sweetrpc_ConnectToRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetConnectToRemoteNodeCall {
    return try Sweetrpc_SweetConnectToRemoteNodeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest) throws -> Sweetrpc_DisconnectFromRemoteNodeResponse {
    return try Sweetrpc_SweetDisconnectFromRemoteNodeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func disconnectFromRemoteNode(_ request: Sweetrpc_DisconnectFromRemoteNodeRequest, completion: @escaping (Sweetrpc_DisconnectFromRemoteNodeResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetDisconnectFromRemoteNodeCall {
    return try Sweetrpc_SweetDisconnectFromRemoteNodeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func reboot(_ request: Sweetrpc_RebootRequest) throws -> Sweetrpc_RebootResponse {
    return try Sweetrpc_SweetRebootCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func reboot(_ request: Sweetrpc_RebootRequest, completion: @escaping (Sweetrpc_RebootResponse?, CallResult) -> Void) throws -> Sweetrpc_SweetRebootCall {
    return try Sweetrpc_SweetRebootCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

